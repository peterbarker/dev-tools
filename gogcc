#!/usr/bin/python3

'''

A tool to look through a directory full of expanded downloaded gcc
archives and update a symlink based on a passed in version string

Peter Barker 2023


Expects a directory layout like this:

pbarker@fx:~/gcc$ ls -la
total 92
drwxrwxr-x  14 pbarker pbarker  4096 Mar 26 14:40 .
drwxr-xr-x 167 pbarker pbarker 36864 Mar 26 14:40 ..
lrwxrwxrwx   1 pbarker pbarker    34 Mar 26 13:37 ardupilot-release -> gcc-arm-none-eabi-10-2020-q4-major
drwxr-xr-x   8 pbarker pbarker  4096 Dec 11 10:20 arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi
lrwxrwxrwx   1 pbarker pbarker    39 Mar 26 14:40 bin -> /home/pbarker/gcc/ardupilot-release/bin
lrwxrwxrwx   1 pbarker pbarker    34 Aug 11  2022 gcc-10.2.1 -> gcc-arm-none-eabi-10-2020-q4-major
drwxrwxr-x   6 pbarker pbarker  4096 Nov 26  2021 gcc-arm-none-eabi-10-2020-q4-major
drwxrwxr-x   6 pbarker pbarker  4096 Aug  9  2021 gcc-arm-none-eabi-10.3-2021.07
drwxrwxr-x   6 pbarker pbarker  4096 Apr  4  2017 gcc-arm-none-eabi-4_7-2013q3
drwxrwxr-x   6 pbarker pbarker  4096 Jun 18  2015 gcc-arm-none-eabi-4_7-2014q2
drwxrwxr-x   6 pbarker pbarker  4096 Apr  4  2017 gcc-arm-none-eabi-4_8-2014q1
drwxrwxr-x   6 pbarker pbarker  4096 Oct 20  2015 gcc-arm-none-eabi-4_9-2015q3
drwxrwxr-x   6 pbarker pbarker  4096 Dec  7  2016 gcc-arm-none-eabi-5_4-2016q3
drwxrwxr-x   6 pbarker pbarker  4096 Apr  4  2017 gcc-arm-none-eabi-6-2017-q1-update
drwxr-xr-x   6 pbarker pbarker  4096 Jun 27  2017 gcc-arm-none-eabi-6-2017-q2-update
drwxrwxr-x   6 pbarker pbarker  4096 Jan 24  2017 gcc-arm-none-eabi-6_2-2016q4
drwxr-xr-x   6 pbarker pbarker  4096 Apr  1  2020 gcc-arm-none-eabi-9-2019-q4-major


That "bin" symlink is the one that this script manipulates

'''

import argparse
import os
import re

class FoundVer(object):
    def __init__(self, name, major, minor, year, quarter):
        self.name = name

        self.major = major
        self.minor = minor
        self.year = year
        self.quarter = quarter

    def as_string(self):
        '''should probably override < operator instead - so don't do __str__'''
        return "-".join([str(x) for x in [self.major, self.minor, self.year, self.quarter]])

class SetGCCVersion(object):
    def __init__(self, version, list_versions=False):
        # directory which holds all gcc directories:
        home = os.path.expanduser('~')
        self.gcc_basedir = os.path.join(home, "gcc")

        self.version = version
        self.list_versions = list_versions

    def available_versions(self):
        '''return available versions from gcc_basedir.  Will be sorted from oldest to youngest'''

        # parse out all known formats:
        blacklist = frozenset([
            'bin',  # this is the link we're going to create!
        ])
        ret = []
        for d in os.scandir(self.gcc_basedir):
            if d.name in blacklist:
                continue
            # e.g. gcc-arm-none-eabi-4_9-2015q3
            m = re.match(r"gcc-arm-none-eabi-(?P<major>\d+)_(?P<minor>\d+)-(?P<year>\d+)q(?P<quarter>\d)$", d.name)
            if m is not None:
                ret.append(FoundVer(d.name, m.group("major"), m.group("minor"), m.group("year"), m.group("quarter")))
                continue

            # e.g. gcc-arm-none-eabi-9-2019-q4-major
            m = re.match(r"gcc-arm-none-eabi-(?P<major>\d+)-(?P<year>\d+)-q(?P<quarter>\d)-(?:major|update)$", d.name)
            if m is not None:
                ret.append(FoundVer(d.name, m.group("major"), None, m.group("year"), m.group("quarter")))
                continue

            # e.g. arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi
            m = re.match(r"arm-gnu-toolchain-(?P<major>\d+)[.](?P<minor>\d+)[.]rel1-x86_64-arm-none-eabi$", d.name)
            if m is not None:
                ret.append(FoundVer(d.name, m.group("major"), m.group("minor"), None, None))
                continue

            # e.g. gcc-arm-none-eabi-10.3-2021.07
            m = re.match(r"gcc-arm-none-eabi-(?P<major>\d+)[.](?P<minor>\d+)-(?P<year>\d+)[.](?P<month>\d+)$", d.name)
            if m is not None:
                ret.append(FoundVer(d.name, m.group("major"), m.group("minor"), m.group("year"), None))
                continue

            # e.g. gcc-10.2.1  (specifically created symlinks)
            m = re.match(r"(?:gcc-)?(?P<major>\d+)[.](?P<minor>\d+)[.](?P<point>\d+)$", d.name)
            if m is not None:
                ret.append(FoundVer(d.name, m.group("major"), m.group("minor"), None, None))
                continue

            # any symlink can be considered available - but only for
            # direct matching:
            if os.path.islink(os.path.join(self.gcc_basedir, d.name)):
                ret.append(FoundVer(d.name, None, None, None, None))
                continue

            raise ValueError(f"Did not understand directory entry ({d.name})")

        ret = sorted(ret, key=lambda x : x.as_string())

        return ret

    def parse_version_argument(self, version):
        '''parses version argument and returns best guess of major, minor,
        year and quarter'''

        # e.g. "gogcc 5"
        m = re.match(r"(?P<major>\d+)$", version)
        if m is not None:
            return (m.group("major"), None, None, None)

        # e.g. "gogcc 5.2"
        m = re.match(r"(?P<major>\d+)[.](?P<minor>\d+)$", version)
        if m is not None:
            return (m.group("major"), m.group("minor"), None, None)

        # e.g. "gogcc 10.2.21"
        m = re.match(r"(?P<major>\d+)[.](?P<minor>\d+)[.](?P<point>\d+)$", version)
        if m is not None:
            return (m.group("major"), m.group("minor"), None, None)

        raise ValueError(f"Did not understand version ({version})")

    def find_link_source_version(self):
        '''returns name of gcc directory based on self.link_version'''
        if self.version == "release":
            return "ardupilot-release"

        filtered = []
        versions = self.available_versions()
        if versions is None:
            raise ValueError("Did not find any gcc versions")

        try:
            (major, minor, year, quarter) = self.parse_version_argument(self.version)
        except ValueError:
            # provide for nominating version by specifically named symlinks:
            for available in versions:
                if available.name == self.version:
                    return self.version
            raise

        for available in versions:
            if available.name == self.version:
                return self.version

            # major must always match:
            # print("av %s" % available.as_string())
            if available.major != major:
                continue
            if minor is not None:
                if available.minor != minor:
                    continue
            filtered.append(available)

        if len(filtered) == 0:
            raise ValueError("No versions match (%s)" % self.version)

        if len(filtered) > 1:
            self.progress("Multiple matches")
            for f in filtered:
                self.progress(f"     {f.as_string()}: {f.name}")

        return filtered[-1].name

    def find_link_source(self):
        '''returns path to link source based on self.version'''
        return os.path.join(self.gcc_basedir, self.find_link_source_version(), "bin")

    def progress(self, message):
        '''print message, perhaps prefixed with additional information'''
        print(f"gogcc: {message}")

    def run_list_versions(self):
        for ver in self.available_versions():
            print(f"{ver.name} ({ver.major} {ver.minor} {ver.year} {ver.quarter})")

    def run(self):
        if self.list_versions:
            return self.run_list_versions()

        # link_destination is the name of the symlink file
        link_destination = os.path.join(self.gcc_basedir, "bin")

        # link_source is the text of the symlink file
        link_source = self.find_link_source()

        self.progress(f"Creating symlink in ({link_destination}) with text ({link_source})")
        if os.path.exists(link_destination):
            if not os.path.islink(link_destination):
                raise ValueError("%s is not a symlink")
            os.unlink(link_destination)

        os.symlink(link_source, link_destination)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('version', nargs="?")
    parser.add_argument("--list-versions", action='store_true', default=False, help="list all available versions")
    args = parser.parse_args()

    setter = SetGCCVersion(args.version, list_versions=args.list_versions)
    setter.run()
